// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: stack.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StackService_Push_FullMethodName = "/StackService/Push"
	StackService_Pop_FullMethodName  = "/StackService/Pop"
)

// StackServiceClient is the client API for StackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StackServiceClient interface {
	Push(ctx context.Context, in *PushServiceRequest, opts ...grpc.CallOption) (*PushServiceReply, error)
	Pop(ctx context.Context, in *PopServiceRequest, opts ...grpc.CallOption) (*PopServiceReply, error)
}

type stackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStackServiceClient(cc grpc.ClientConnInterface) StackServiceClient {
	return &stackServiceClient{cc}
}

func (c *stackServiceClient) Push(ctx context.Context, in *PushServiceRequest, opts ...grpc.CallOption) (*PushServiceReply, error) {
	out := new(PushServiceReply)
	err := c.cc.Invoke(ctx, StackService_Push_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stackServiceClient) Pop(ctx context.Context, in *PopServiceRequest, opts ...grpc.CallOption) (*PopServiceReply, error) {
	out := new(PopServiceReply)
	err := c.cc.Invoke(ctx, StackService_Pop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StackServiceServer is the server API for StackService service.
// All implementations must embed UnimplementedStackServiceServer
// for forward compatibility
type StackServiceServer interface {
	Push(context.Context, *PushServiceRequest) (*PushServiceReply, error)
	Pop(context.Context, *PopServiceRequest) (*PopServiceReply, error)
	mustEmbedUnimplementedStackServiceServer()
}

// UnimplementedStackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStackServiceServer struct {
}

func (UnimplementedStackServiceServer) Push(context.Context, *PushServiceRequest) (*PushServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedStackServiceServer) Pop(context.Context, *PopServiceRequest) (*PopServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pop not implemented")
}
func (UnimplementedStackServiceServer) mustEmbedUnimplementedStackServiceServer() {}

// UnsafeStackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StackServiceServer will
// result in compilation errors.
type UnsafeStackServiceServer interface {
	mustEmbedUnimplementedStackServiceServer()
}

func RegisterStackServiceServer(s grpc.ServiceRegistrar, srv StackServiceServer) {
	s.RegisterService(&StackService_ServiceDesc, srv)
}

func _StackService_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Push(ctx, req.(*PushServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StackService_Pop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PopServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StackServiceServer).Pop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StackService_Pop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StackServiceServer).Pop(ctx, req.(*PopServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StackService_ServiceDesc is the grpc.ServiceDesc for StackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StackService",
	HandlerType: (*StackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _StackService_Push_Handler,
		},
		{
			MethodName: "Pop",
			Handler:    _StackService_Pop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stack.proto",
}
